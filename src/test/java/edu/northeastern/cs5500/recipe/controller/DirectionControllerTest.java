/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.recipe.controller;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import edu.northeastern.cs5500.recipe.model.Direction;
import java.util.UUID;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

class DirectionControllerTest {

    @Test
    void testRegisterCreatesDirections() {
        DirectionController directionController = new DirectionController();
        assertThat(directionController.getDirections()).isEmpty();
        directionController.register();
        assertThat(directionController.getDirections()).isNotEmpty();
    }

    private DirectionController directionController;

    @Test
    void testRegisterCreatesValidDirections() {
        this.directionController = new DirectionController();
        this.directionController.register();

        for (Direction direction : directionController.getDirections()) {
            assertWithMessage(direction.getName()).that(direction.isValid()).isTrue();
        }
    }

    @Test
    void testCanAddDirection() {
        // This test should NOT call register

        Direction direction = new Direction();
        try {
            UUID id = this.directionController.addDirection(direction);
            assertThat(this.directionController.getDirections().contains(direction));
        } catch (Exception e) {

        }
    }

    @Test
    void testCanReplaceUser() {
        // This test should NOT call register

        try {
            // Add in new direction
            Direction originalDirection = new Direction();
            UUID id = this.directionController.addDirection(originalDirection);

            // Replace direction
            Direction newDirection = new Direction();
            newDirection.setId(id);
            this.directionController.updateDirection(newDirection);

            // Test
            boolean find = false;
            for (Direction direction : this.directionController.getDirections()) {
                if (direction.getId() == id) {
                    find = true;
                    Assert.assertEquals(direction, newDirection);
                }
            }
            if (!find) {
                Assert.fail();
            }

        } catch (Exception e) {

        }
    }

    @Test
    void testCanDeleteUser() {
        // This test should NOT call register

        try {
            // Add new direction
            Direction newDirection = new Direction();
            UUID id = this.directionController.addDirection(newDirection);

            // Delete that direction
            this.directionController.deleteDirection(id);

            // Test
            boolean find = false;
            for (Direction direction : this.directionController.getDirections()) {
                if (direction.getId() == id) {
                    find = true;
                    break;
                }
            }
            if (find) {
                Assert.fail();
            }

        } catch (Exception e) {

        }
    }
}
