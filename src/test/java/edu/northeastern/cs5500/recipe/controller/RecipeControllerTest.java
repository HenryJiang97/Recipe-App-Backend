/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.northeastern.cs5500.recipe.controller;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import edu.northeastern.cs5500.recipe.model.Recipe;
import org.junit.jupiter.api.Test;

class RecipeControllerTest {
    @Test
    void testRegisterCreatesRecipes() {
        RecipeController recipeController = new RecipeController();
        assertThat(recipeController.getRecipes()).isEmpty();
        recipeController.register();
        assertThat(recipeController.getRecipes()).isNotEmpty();
    }

    @Test
    void testRegisterCreatesValidRecipes() {
        RecipeController recipeController = new RecipeController();
        recipeController.register();

        for (Recipe recipe : recipeController.getRecipes()) {
            assertWithMessage(recipe.getTitle()).that(recipe.isValid()).isTrue();
        }
    }

    @Test
    void testCanAddRecipe() throws Exception {
        // This test should NOT call register
        // TODO: implement this test.
        RecipeController recipeController = new RecipeController();

        final Recipe defaultRecipe1 = new Recipe();
        defaultRecipe1.setTitle("Hot dog");
        recipeController.addRecipe(defaultRecipe1);

        final Recipe defaultRecipe2 = new Recipe();
        defaultRecipe2.setTitle("Hot ");

        for (Recipe recipe : recipeController.getRecipes()) {
            assertThat(recipe).isEqualTo(defaultRecipe1);
        }
    }

    @Test
    void testCanReplaceRecipe() throws Exception{
        // This test should NOT call register
        // TODO: implement this test.

        RecipeController recipeController = new RecipeController();

        final Recipe defaultRecipe1 = new Recipe();
        defaultRecipe1.setTitle("Hot dog");
        recipeController.addRecipe(defaultRecipe1);

        final Recipe defaultRecipe2 = new Recipe();
        defaultRecipe2.setTitle("Cold");
        defaultRecipe2.setId(defaultRecipe1.getId());

        for (Recipe recipe : recipeController.getRecipes()) {
            assertThat(recipe).isEqualTo(defaultRecipe1);
        }
        recipeController.updateRecipe(defaultRecipe2);
        for (Recipe recipe : recipeController.getRecipes()) {
            assertThat(recipe).isEqualTo(defaultRecipe2);
            assertThat(recipe).isNotEqualTo(defaultRecipe1);
        }

    }

    @Test
    void testCanDeleteRecipe() throws Exception {
        // This test should NOT call register
        // TODO: implement this test

        RecipeController recipeController = new RecipeController();
        final Recipe defaultRecipe1 = new Recipe();
        defaultRecipe1.setTitle("Hot dog");
        recipeController.addRecipe(defaultRecipe1);
        final Recipe defaultRecipe2 = new Recipe();
        defaultRecipe2.setTitle("Cold");
        recipeController.addRecipe(defaultRecipe2);
        recipeController.deleteRecipe(defaultRecipe1.getId());
        for (Recipe recipe : recipeController.getRecipes()) {
            assertThat(recipe).isEqualTo(defaultRecipe2);
            assertThat(recipe).isNotEqualTo(defaultRecipe1);
        }
    }
}
